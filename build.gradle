group = 'com.strongloop';

buildscript {
  repositories {
      mavenCentral()
  }
  dependencies {
      // Note: 0.5.5 changed the way how tasks are initialized
      // The new way makes it impossible to configure Javadoc artifact
      // for the maven-publish plugin. We have to stay with 0.5.4 for now.
      // See also the discussion in adt-dev: http://bit.ly/17IOTvG
      classpath 'com.android.tools.build:gradle:0.5.4'
      classpath 'org.apache.commons:commons-io:1.3.2'

  }
}

apply plugin: 'android-library'
apply plugin: 'maven-publish'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "http://artifactory.strongloop.com:8081/artifactory/repo/"
    }
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.1.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 14
    }
}

configurations {
    includeJavadocs
    includeSources
}

dependencies {
    compile 'org.atteo:evo-inflector:1.0.1'

    def strongRemoting = 'com.strongloop:strong-remoting-android:0.1.0-SNAPSHOT'
    compile strongRemoting
    includeJavadocs strongRemoting + ':javadoc'
    includeSources strongRemoting + ':sources'

    instrumentTestCompile 'com.google.guava:guava:15.0'
}

task unpackJavadocIncludes(type: Copy) {
    // unpack all source dependencies
    configurations.includeSources.resolve().each { dep ->
        from zipTree(dep.absolutePath)
    }
    into 'build/source/javadoc-deps'
}

android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc, dependsOn: unpackJavadocIncludes) {
        description "Generates Javadoc for $variant.name."
        source variant.javaCompile.source
        source fileTree('build/source/javadoc-deps').matching {
          include '**/*.java'
        }
        ext.androidJar = "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }
}

task androidReleaseJar(type: Jar, dependsOn: assembleRelease) {
    from "$buildDir/classes/release/"
}

task updateApiDocs(type: Copy, dependsOn: generateReleaseJavadoc) {
    from generateReleaseJavadoc.destinationDir
    into 'docs/api'
}

task androidJavadocsJar(type: Jar, dependsOn: generateReleaseJavadoc) {
    classifier = 'javadoc'
    from generateReleaseJavadoc.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.allSource
}

task distProperties() { doLast {
    new File(androidReleaseJar.archivePath.absolutePath + '.properties').withWriter { w ->
      w.println('src=src/' + androidSourcesJar.archiveName)
      w.println('doc=docs/' + androidJavadocsJar.archiveName)
    }

    // hack: create properties file for strong-remoting-android
    configurations.compile.resolve().each { dep ->
        if (dep.name.startsWith('strong-remoting-android')) {
            new File(dep.absolutePath + '.properties').withWriter { w ->
                def baseName = org.apache.commons.io.FilenameUtils.getBaseName(dep.absolutePath)
                w.println('src=src/' + baseName + '-sources.jar')
                w.println('doc=docs/' + baseName + '-javadoc.jar')
            }
        }
    }
} }

// Structure based on
// http://stackoverflow.com/questions/9873152/how-to-attach-javadoc-or-sources-to-jars-in-libs-folder
task dist(type: Zip, dependsOn: [
  androidReleaseJar,
  androidJavadocsJar,
  androidSourcesJar,
  distProperties]) {
    from(androidReleaseJar.archivePath)
    from(androidReleaseJar.archivePath.absolutePath + '.properties')

    // bundle in dependencies
    configurations.compile.resolve().each { dep ->
        // exclude jars from Android SDK
        if (dep.absolutePath.contains('/com/android/')) return

        from (dep.absolutePath)

        // include -sources and -docs for strong-remoting-android
        if (dep.name.startsWith('strong-remoting-android')) {
            def baseName = org.apache.commons.io.FilenameUtils.getBaseName(dep.absolutePath)
            from(dep.absolutePath + '.properties')
        }
    }

    configurations.includeJavadocs.resolve().each { dep ->
      into('docs') {
          from(dep.absolutePath)
      }
    }

    configurations.includeSources.resolve().each { dep ->
      into('src') {
          from(dep.absolutePath)
      }
    }

    into('src') {
        from(androidSourcesJar.archivePath)
    }
    into('docs') {
        from(androidJavadocsJar.archivePath)
    }
}

artifacts {
    archives androidReleaseJar
    archives androidSourcesJar
    archives androidJavadocsJar
    archives dist
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact androidReleaseJar

            artifact androidSourcesJar {
                classifier 'sources'
            }

            artifact androidJavadocsJar {
                classifier 'javadoc'
            }

            pom.withXml {
                def root = asNode()

                root.appendNode('packaging', 'jar');

                def deps = new Node(root, 'dependencies')
                configurations.compile.allDependencies.each { dep ->
                    def node = new Node(deps, 'dependency')
                    new Node(node, 'groupId', dep.group)
                    new Node(node, 'artifactId', dep.name)
                    new Node(node, 'version', dep.version);
                }

                root.appendNode('name', 'loopback-android')
                root.appendNode('description', 'Android client for LoopBack')
                root.appendNode('url', 'https://github.com/strongloop/loopback-android')

                def licenses = new Node(root, 'licenses');
                def lic = new Node(licenses, 'license');
                lic.appendNode('name', 'The MIT License')
                lic.appendNode('url', 'http://opensource.org/licenses/mit-license.php')
                lic.appendNode('distribution', 'repo')

                def scm = new Node(root, 'scm')
                scm.appendNode('connection', 'scm:git@github.com:strongloop/loopback-android.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:strongloop/loopback-android.git')
                scm.appendNode('url', 'https://github.com/strongloop/loopback-android')

                def devs = new Node(root, 'developers')
                def dev1 = new Node(devs, 'developer')
                dev1.appendNode('id', 'bajtos')
                dev1.appendNode('name', 'Miroslav Bajtos')
                dev1.appendNode('email', 'miroslav@strongloop.com')
                dev1.appendNode('organization', 'StrongLoop')
                dev1.appendNode('organizationUrl', 'http://strongloop.com/')
            }
        }
    }
}
